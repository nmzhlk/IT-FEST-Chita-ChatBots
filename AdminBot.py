import sqlite3

from telegram import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import CommandHandler, CallbackQueryHandler
from telegram.ext import Updater, MessageHandler, Filters

TOKEN_ADMIN = ""  # Insert your own bot token here

TARGET_ID = 0

connection = sqlite3.connect("applications.db", check_same_thread=False)
cursor = connection.cursor()

cursor.execute(
    """CREATE TABLE IF NOT EXISTS applications ([id] INTEGER PRIMARY KEY, 
    [surname] TEXT, [name] TEXT, [patronymic] TEXT, [birthday] TEXT, [phone] TEXT, [email] TEXT, 
    [info] TEXT, [position] TEXT, [education] TEXT, [status] TEXT)"""
)

inline_keyboard = [
    [InlineKeyboardButton("üëå –ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É",
                          callback_data="ACCEPT")],
    [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É",
                          callback_data="CONFIRM")],
    [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É",
                          callback_data="DECLINE")]
]
inline_markup = InlineKeyboardMarkup(inline_keyboard)

reply_keyboard = [
    [KeyboardButton("‚úã –í—Å–µ –∑–∞—è–≤–∫–∏")],
    [KeyboardButton("üëå –ü—Ä–∏–Ω—è—Ç—ã–µ –∑–∞—è–≤–∫–∏")],
    [KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏")],
    [KeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏")],
    [KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
]
reply_markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)


def start(update, context):
    update.message.reply_text("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!")
    update.message.reply_text("–Ø ‚Äî –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞—è–≤–æ–∫.")
    update.message.reply_text("–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", reply_markup=reply_markup)


def helper(update, context):
    update.message.reply_text("–Ø —É–º–µ—é –ø—Ä–∏–Ω–∏–º–∞—Ç—å, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –∏ –æ—Ç–∫–ª–æ–Ω—è—Ç—å –∑–∞—è–≤–∫–∏")
    update.message.reply_text("–Ø –º–æ–≥—É –≤—ã–≤–æ–¥–∏—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏ –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∏—Ö –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º")


def every(update, context):
    data = cursor.execute("SELECT * FROM applications").fetchall()
    if data:
        update.message.reply_text("‚úÖ –í—ã–≤–æ–∂—É —Å–ø–∏—Å–æ–∫ –í–°–ï–• –∑–∞—è–≤–æ–∫")
        for piece in range(len(data)):
            update.message.reply_text(f"ID: {data[piece][0]}\n"
                                      f"–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: {data[piece][10]}\n"
                                      f"1. –§–ò–û: {data[piece][1]} {data[piece][2]} {data[piece][3]}\n"
                                      f"2. –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data[piece][4]}\n"
                                      f"3. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data[piece][5]}\n"
                                      f"4. Email: {data[piece][6]}\n"
                                      f"5. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {data[piece][7]}\n"
                                      f"6. –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å: {data[piece][8]}\n"
                                      f"7. –£—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: {data[piece][9]}", reply_markup=inline_markup)
    else:
        update.message.reply_text("‚ùó –ù–µ—Ç –∑–∞—è–≤–æ–∫")


def accepted(update, context):
    data = cursor.execute("SELECT * FROM applications WHERE status = ?", ("–ü—Ä–∏–Ω—è—Ç–∞",)).fetchall()
    if data:
        update.message.reply_text("‚úÖ –í—ã–≤–æ–∂—É —Å–ø–∏—Å–æ–∫ –ü–†–ò–ù–Ø–¢–´–• –∑–∞—è–≤–æ–∫")
        for piece in range(len(data)):
            update.message.reply_text(f"ID: {data[piece][0]}\n"
                                      f"–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: {data[piece][10]}\n"
                                      f"1. –§–ò–û: {data[piece][1]} {data[piece][2]} {data[piece][3]}\n"
                                      f"2. –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data[piece][4]}\n"
                                      f"3. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data[piece][5]}\n"
                                      f"4. Email: {data[piece][6]}\n"
                                      f"5. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {data[piece][7]}\n"
                                      f"6. –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å: {data[piece][8]}\n"
                                      f"7. –£—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: {data[piece][9]}", reply_markup=inline_markup)
    else:
        update.message.reply_text("‚ùó –ù–µ—Ç –ü–†–ò–ù–Ø–¢–´–• –∑–∞—è–≤–æ–∫")


def confirmed(update, context):
    data = cursor.execute("SELECT * FROM applications WHERE status = ?", ("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞",)).fetchall()
    if data:
        update.message.reply_text("‚úÖ –í—ã–≤–æ–∂—É —Å–ø–∏—Å–æ–∫ –ü–û–î–¢–í–ï–†–ñ–î–Å–ù–ù–´–• –∑–∞—è–≤–æ–∫")
        for piece in range(len(data)):
            update.message.reply_text(f"ID: {data[piece][0]}\n"
                                      f"–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: {data[piece][10]}\n"
                                      f"1. –§–ò–û: {data[piece][1]} {data[piece][2]} {data[piece][3]}\n"
                                      f"2. –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data[piece][4]}\n"
                                      f"3. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data[piece][5]}\n"
                                      f"4. Email: {data[piece][6]}\n"
                                      f"5. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {data[piece][7]}\n"
                                      f"6. –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å: {data[piece][8]}\n"
                                      f"7. –£—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: {data[piece][9]}", reply_markup=inline_markup)
    else:
        update.message.reply_text("‚ùó –ù–µ—Ç –ü–û–î–¢–í–ï–†–ñ–î–Å–ù–ù–´–• –∑–∞—è–≤–æ–∫")


def declined(update, context):
    data = cursor.execute("SELECT * FROM applications WHERE status = ?", ("–û—Ç–∫–ª–æ–Ω–µ–Ω–∞",)).fetchall()
    if data:
        update.message.reply_text("‚úÖ –í—ã–≤–æ–∂—É —Å–ø–∏—Å–æ–∫ –û–¢–ö–õ–û–ù–Å–ù–ù–´–• –∑–∞—è–≤–æ–∫")
        for piece in range(len(data)):
            update.message.reply_text(f"ID: {data[piece][0]}\n"
                                      f"–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: {data[piece][10]}\n"
                                      f"1. –§–ò–û: {data[piece][1]} {data[piece][2]} {data[piece][3]}\n"
                                      f"2. –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data[piece][4]}\n"
                                      f"3. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data[piece][5]}\n"
                                      f"4. Email: {data[piece][6]}\n"
                                      f"5. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {data[piece][7]}\n"
                                      f"6. –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å: {data[piece][8]}\n"
                                      f"7. –£—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: {data[piece][9]}", reply_markup=inline_markup)
    else:
        update.message.reply_text("‚ùó –ù–µ—Ç –û–¢–ö–õ–û–ù–Å–ù–ù–´–• –∑–∞—è–≤–æ–∫")


def button(update, context):
    query = update.callback_query
    query.answer()

    show = query["message"]["text"]
    id_list = show.split("\n")[0]
    ident = "".join(id_list)
    ident.split(":")
    target_id = ident[-1]

    if query.data.startswith("ACCEPT"):
        cursor.execute("UPDATE applications SET status = ? WHERE id = ?", ("–ü—Ä–∏–Ω—è—Ç–∞", target_id))
        connection.commit()

        data = cursor.execute("SELECT * FROM applications WHERE id = ?", (target_id,)).fetchall()
        query.edit_message_text(text=f"ID: {data[0][0]}\n"
                                     f"–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: {data[0][10]}\n"
                                     f"1. –§–ò–û: {data[0][1]} {data[0][2]} {data[0][3]}\n"
                                     f"2. –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data[0][4]}\n"
                                     f"3. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data[0][5]}\n"
                                     f"4. Email: {data[0][6]}\n"
                                     f"5. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {data[0][7]}\n"
                                     f"6. –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å: {data[0][8]}\n"
                                     f"7. –£—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: {data[0][9]}\n\n"
                                     f"‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!")

    if query.data.startswith("CONFIRM"):
        cursor.execute("UPDATE applications SET status = ? WHERE id = ?", ("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞", target_id))
        connection.commit()

        data = cursor.execute("SELECT * FROM applications WHERE id = ?", (target_id,)).fetchall()
        query.edit_message_text(text=f"ID: {data[0][0]}\n"
                                     f"–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: {data[0][10]}\n"
                                     f"1. –§–ò–û: {data[0][1]} {data[0][2]} {data[0][3]}\n"
                                     f"2. –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data[0][4]}\n"
                                     f"3. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data[0][5]}\n"
                                     f"4. Email: {data[0][6]}\n"
                                     f"5. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {data[0][7]}\n"
                                     f"6. –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å: {data[0][8]}\n"
                                     f"7. –£—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: {data[0][9]}\n\n"
                                     f"‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")

    if query.data.startswith("DECLINE"):
        cursor.execute("UPDATE applications SET status = ? WHERE id = ?", ("–û—Ç–∫–ª–æ–Ω–µ–Ω–∞", target_id))
        connection.commit()

        data = cursor.execute("SELECT * FROM applications WHERE id = ?", (target_id,)).fetchall()
        query.edit_message_text(text=f"ID: {data[0][0]}\n"
                                     f"–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: {data[0][10]}\n"
                                     f"1. –§–ò–û: {data[0][1]} {data[0][2]} {data[0][3]}\n"
                                     f"2. –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data[0][4]}\n"
                                     f"3. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data[0][5]}\n"
                                     f"4. Email: {data[0][6]}\n"
                                     f"5. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {data[0][7]}\n"
                                     f"6. –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å: {data[0][8]}\n"
                                     f"7. –£—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: {data[0][9]}\n\n"
                                     f"‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!")


def handler(update, context):
    message = update.message.text
    if message == "‚úã –í—Å–µ –∑–∞—è–≤–∫–∏":
        every(update, context)
    if message == "üëå –ü—Ä–∏–Ω—è—Ç—ã–µ –∑–∞—è–≤–∫–∏":
        accepted(update, context)
    if message == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏":
        confirmed(update, context)
    if message == "‚ùå –û—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏":
        declined(update, context)
    if message == "‚ùì –ü–æ–º–æ—â—å":
        helper(update, context)


def main():
    updater = Updater(TOKEN_ADMIN, use_context=True)
    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.text, handler))
    dp.add_handler(CallbackQueryHandler(button))
    updater.start_polling()
    updater.idle()


if __name__ == "__main__":
    main()
